/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package GUI;

import java.awt.CardLayout;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import java.util.logging.StreamHandler;
import javax.swing.JFileChooser;
import org.jivesoftware.smack.ConnectionListener;
import org.jivesoftware.smack.SmackException;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.XMPPException;
import org.xmpp.xmppfiletransfer.XMPP;
import org.xmpp.xmppfiletransfer.SenderHandler;

/**
 *
 * @author ivo.dipumpo
 */
public class Main extends javax.swing.JFrame implements ConnectionListener{
    private volatile SenderHandler XMPPHandler = null;

    /**
     * Creates new form Main
     */
    public Main() {
        
        initComponents();
       
        this.setHanlder();
    }
    TextAreaOutputStream outputStream ;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanelConnectionStatus1 = new GUI.JPanelConnectionStatus();
        jPanel1 = new javax.swing.JPanel();
        users1 = new GUI.Users();
        connessione1 = new GUI.Connessione();
        fileTransfer1 = new GUI.FileTransfer();
        jScrollPaneTextArea = new javax.swing.JScrollPane();
        jTextAreaOutput = new javax.swing.JTextArea();
        jScrollPaneTextAreaLog = new javax.swing.JScrollPane();
        jTextAreaLog = new javax.swing.JTextArea();
        jPanelConnectionStatus3 = new GUI.JPanelConnectionStatus();
        jMenuBarConnessioni = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemNuovaConnessione = new javax.swing.JMenuItem();
        jMenuAspetta = new javax.swing.JMenu();
        jMenuItemUsers = new javax.swing.JMenuItem();
        jMenuItemFileTransfer = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemTextArea = new javax.swing.JMenuItem();
        jMenuItemTextAreaLog = new javax.swing.JMenuItem();

        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout jPanelConnectionStatus1Layout = new javax.swing.GroupLayout(jPanelConnectionStatus1);
        jPanelConnectionStatus1.setLayout(jPanelConnectionStatus1Layout);
        jPanelConnectionStatus1Layout.setHorizontalGroup(
            jPanelConnectionStatus1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 553, Short.MAX_VALUE)
        );
        jPanelConnectionStatus1Layout.setVerticalGroup(
            jPanelConnectionStatus1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 379, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        jPanel1.setLayout(new java.awt.CardLayout());

        users1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                users1MouseClicked(evt);
            }
        });
        users1.jComboBoxActiveUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                users1ComboMouseClicked(evt);
            }
        });
        jPanel1.add(users1, "utenti");

        connessione1.jButtonConnect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonConnectMouseClicked(evt);
            }
        });
        jPanel1.add(connessione1, "nuova connessione");

        fileTransfer1.jButtonScegliFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scegliFile(evt);
            }
        });
        fileTransfer1.jComboBoxUserSelect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileTransfer1ComboMouseClicked( evt);
            }
        });
        fileTransfer1.jButtonSendRequest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendFile(evt);
            }
        });
        jPanel1.add(fileTransfer1, "file transfer");

        jTextAreaOutput.setColumns(20);
        jTextAreaOutput.setRows(5);
        jScrollPaneTextArea.setViewportView(jTextAreaOutput);

        jPanel1.add(jScrollPaneTextArea, "text area");

        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jScrollPaneTextAreaLog.setViewportView(jTextAreaLog);

        jPanel1.add(jScrollPaneTextAreaLog, "text area log");

        getContentPane().add(jPanel1);
        getContentPane().add(jPanelConnectionStatus3);

        jMenu1.setText("File");

        jMenuItemNuovaConnessione.setText("jMenuItem1");
        jMenuItemNuovaConnessione.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItemNuovaConnessioneMouseClicked(evt);
            }
        });
        jMenuItemNuovaConnessione.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNuovaConnessioneActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemNuovaConnessione);

        jMenuBarConnessioni.add(jMenu1);

        jMenuAspetta.setText("Edit");

        jMenuItemUsers.setText("jMenuItem1");
        jMenuItemUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemUsersActionPerformed(evt);
            }
        });
        jMenuAspetta.add(jMenuItemUsers);

        jMenuItemFileTransfer.setText("jMenuItem2");
        jMenuItemFileTransfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFileTransferActionPerformed(evt);
            }
        });
        jMenuAspetta.add(jMenuItemFileTransfer);

        jMenuBarConnessioni.add(jMenuAspetta);

        jMenu2.setText("textarea");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItemTextArea.setText("jMenuItem1");
        jMenuItemTextArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTextAreaActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemTextArea);

        jMenuItemTextAreaLog.setText("jMenuItem1");
        jMenuItemTextAreaLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTextAreaLogActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemTextAreaLog);

        jMenuBarConnessioni.add(jMenu2);

        setJMenuBar(jMenuBarConnessioni);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemNuovaConnessioneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemNuovaConnessioneMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jMenuItemNuovaConnessioneMouseClicked

    private void jMenuItemNuovaConnessioneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNuovaConnessioneActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout)(this.jPanel1.getLayout());
    cl.show(this.jPanel1, "nuova connessione");

    }//GEN-LAST:event_jMenuItemNuovaConnessioneActionPerformed

    private void jMenuItemUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemUsersActionPerformed
        // TODO add your handling code here:
          CardLayout cl = (CardLayout)(this.jPanel1.getLayout());
    cl.show(this.jPanel1, "utenti");
    }//GEN-LAST:event_jMenuItemUsersActionPerformed
private void jButtonConnectMouseClicked(java.awt.event.MouseEvent evt) {                                          
        // TODO add your handling code here:

        client = new XMPP(connessione1.jTextFieldServer.getText(), 5222, 
                connessione1.jTextFieldUsername.getText(), 
                connessione1.jTextFieldPassword.getText());
       
        XMPPHandler = client.createHandler();
       
               XMPPHandler.addConnectionListener(this);
        XMPPHandler.start();
          System.out.println("clacla" + client);
    }                                          
    private void users1ComboMouseClicked(java.awt.event.MouseEvent evt) {    

  
       users1.jComboBoxActiveUsers.setModel(new ComboModel(XMPPHandler.getUsers()));

}   private void scegliFile(java.awt.event.ActionEvent evt){
     
    int returnVal = fileTransfer1.jFileChooser1.showOpenDialog(this);
    if(returnVal == JFileChooser.APPROVE_OPTION) {
       System.out.println("You chose to open this file: " +
            fileTransfer1.jFileChooser1.getSelectedFile().getName());
       fileTransfer1.jLabelFile.setText(
               fileTransfer1.jFileChooser1.getSelectedFile().getAbsolutePath());
              
    }
 
}
     private void fileTransfer1ComboMouseClicked(java.awt.event.MouseEvent evt){    

     System.out.println("cl" + client);
       fileTransfer1.jComboBoxUserSelect.setModel(
               new ComboModel(XMPPHandler.getUsers()));

}
    private void sendFile(java.awt.event.MouseEvent evt){
         Thread transferThread = new Thread(new Runnable() {
            public void run() {
                String JID =(String)fileTransfer1.jComboBoxUserSelect.getSelectedItem();
                String filename =fileTransfer1.jLabelFile.getText();
                File file = fileTransfer1.jFileChooser1.getSelectedFile();
               
                    XMPPHandler.transferFile(JID, file);

                

            }
         });
        transferThread.start();
    }
    private void users1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_users1MouseClicked
        // TODO add your handling code here:
        if (XMPPHandler != null)
       
                XMPPHandler.findUser((String) 
                        this.users1.jComboBoxActiveUsers.getSelectedItem());
       
    }//GEN-LAST:event_users1MouseClicked

    private void jMenuItemFileTransferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFileTransferActionPerformed
        // TODO add your handling code here:
          CardLayout cl = (CardLayout)(this.jPanel1.getLayout());
    cl.show(this.jPanel1, "file transfer");
    }//GEN-LAST:event_jMenuItemFileTransferActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
    
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenuItemTextAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTextAreaActionPerformed
        // TODO add your handling code here:
              CardLayout cl = (CardLayout)(this.jPanel1.getLayout());
    cl.show(this.jPanel1, "text area");
    }//GEN-LAST:event_jMenuItemTextAreaActionPerformed

    private void jMenuItemTextAreaLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTextAreaLogActionPerformed
        // TODO add your handling code here:
         CardLayout cl = (CardLayout)(this.jPanel1.getLayout());
         cl.show(this.jPanel1, "text area log");
    }//GEN-LAST:event_jMenuItemTextAreaLogActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
 XMPP client = null;
 TextAreaHandler handler;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private GUI.Connessione connessione1;
    private GUI.FileTransfer fileTransfer1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenuAspetta;
    private javax.swing.JMenuBar jMenuBarConnessioni;
    private javax.swing.JMenuItem jMenuItemFileTransfer;
    private javax.swing.JMenuItem jMenuItemNuovaConnessione;
    private javax.swing.JMenuItem jMenuItemTextArea;
    private javax.swing.JMenuItem jMenuItemTextAreaLog;
    private javax.swing.JMenuItem jMenuItemUsers;
    private javax.swing.JPanel jPanel1;
    private GUI.JPanelConnectionStatus jPanelConnectionStatus1;
    private GUI.JPanelConnectionStatus jPanelConnectionStatus3;
    private javax.swing.JScrollPane jScrollPaneTextArea;
    private javax.swing.JScrollPane jScrollPaneTextAreaLog;
    private javax.swing.JTextArea jTextAreaLog;
    private javax.swing.JTextArea jTextAreaOutput;
    private GUI.Users users1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void connected(XMPPConnection connection) {

       this.jPanelConnectionStatus3.jLabelStatus.setText("connesso : in autenticazione");
       System.out.println("fanto");
    }

    @Override
    public void authenticated(XMPPConnection connection, boolean resumed) {
         this.jPanelConnectionStatus3.jLabelColor.setBackground(Color.green);
         this.jPanelConnectionStatus3.jLabelColor.setForeground(Color.green);
          this.jPanelConnectionStatus3.jLabelStatus.setText("autenticato");
    }

    @Override
    public void connectionClosed() {
      
    }

    @Override
    public void connectionClosedOnError(Exception e) {
        this.jPanelConnectionStatus3.jLabelColor.setBackground(Color.RED);
         this.jPanelConnectionStatus3.jLabelColor.setForeground(Color.RED);
          this.jPanelConnectionStatus3.jLabelStatus.setText("connessione chiusa per errore");
         
    }

    @Override
    public void reconnectionSuccessful() {
       
    }

    @Override
    public void reconnectingIn(int seconds) {
       
    }

    @Override
    public void reconnectionFailed(Exception e) {
        
    }
    private void setHanlder(){
      outputStream = new TextAreaOutputStream(this.jTextAreaOutput);
       PrintStream printStream = new PrintStream(new TextAreaOutputStream(
               this.jTextAreaOutput));
        handler=new TextAreaHandler(this.jTextAreaLog);
          handler.setLevel(Level.ALL);
          Logger.getLogger(XMPP.class.getName()).addHandler(handler);
          System.setOut(printStream);
        System.setErr(printStream);
       
    }
}
