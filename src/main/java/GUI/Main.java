/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package GUI;

import GUI.models.ComboModel;
import GUI.models.TableModelOutcomingFileTransfers;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import java.util.logging.StreamHandler;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JTextArea;
import javax.swing.Timer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.jivesoftware.smack.ConnectionListener;
import org.jivesoftware.smack.SmackException;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.XMPPException;
import org.jivesoftware.smack.packet.Presence;
import org.jivesoftware.smack.roster.RosterListener;
import org.xmpp.xmppfiletransfer.FileReceiverHandler;
import org.xmpp.xmppfiletransfer.XMPP;
import org.xmpp.xmppfiletransfer.ConnectionHandler;
import org.xmpp.xmppfiletransfer.Sender;
import org.xmpp.xmppfiletransfer.Transfers;
import org.xmpp.xmppfiletransfer.listeners.FileReceiverListener;
import org.xmpp.xmppfiletransfer.listeners.FileSenderListener;

/**
 *
 * @author ivo.dipumpo
 */
public class Main extends javax.swing.JFrame implements ConnectionListener,
        RosterListener{
    private volatile ConnectionHandler XMPPHandler = null;

    /**
     * Creates new form Main
     */
    public Main() {
        
        initComponents();
       
        this.setHanlder();
    }
    TextAreaOutputStream outputStream ;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jFileChooser1 = new javax.swing.JFileChooser();
        jPanelConnectionStatus = new javax.swing.JPanel();
        jLabelStatus = new javax.swing.JLabel();
        jLabelColor = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPaneTextAreaLog = new javax.swing.JScrollPane();
        jTextAreaLog = new javax.swing.JTextArea();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanelConnessione = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldUsername = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldPassword = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldServer = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JSeparator();
        jButtonConnect = new javax.swing.JButton();
        jButtonDisconnect = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0));
        jScrollPane4 = new javax.swing.JScrollPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelFileTransfer = new javax.swing.JPanel();
        jComboBoxUserSelect = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jButtonSendRequest = new javax.swing.JButton();
        jLabelFile = new javax.swing.JLabel();
        jButtonScegliFile = new javax.swing.JButton();
        jPanelUsers = new javax.swing.JPanel();
        jTextFieldUserToAdd = new javax.swing.JTextField();
        jComboBoxActiveUsers = new javax.swing.JComboBox();
        jButtonAggiungiUser = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jPanelProxy = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListProxies = new javax.swing.JList();
        jButtonVerificaProxy = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableReceivingFile = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableSendingFile = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaOutput = new javax.swing.JTextArea();
        jMenuBarConnessioni = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemNuovaConnessione = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemSaveTextArea = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(150, 200));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        jPanelConnectionStatus.setBackground(new java.awt.Color(153, 255, 204));
        jPanelConnectionStatus.setToolTipText("stato della connessione");
        jPanelConnectionStatus.setName("ggg"); // NOI18N

        jLabelStatus.setText("non connesso");
        jPanelConnectionStatus.add(jLabelStatus);

        jLabelColor.setBackground(java.awt.Color.red);
        jLabelColor.setForeground(java.awt.Color.red);
        jLabelColor.setText("non connesso");
        jLabelColor.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabelColor.setOpaque(true);
        jPanelConnectionStatus.add(jLabelColor);

        getContentPane().add(jPanelConnectionStatus);

        jPanel1.setMinimumSize(new java.awt.Dimension(200, 100));
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 402));
        jPanel1.setLayout(new java.awt.CardLayout());

        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jScrollPaneTextAreaLog.setViewportView(jTextAreaLog);

        jPanel1.add(jScrollPaneTextAreaLog, "text area log");

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setToolTipText("");
        jSplitPane1.setAutoscrolls(true);
        jSplitPane1.setContinuousLayout(true);
        jSplitPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSplitPane1.setMinimumSize(new java.awt.Dimension(25, 100));

        jPanelConnessione.setPreferredSize(new java.awt.Dimension(100, 30));
        jPanelConnessione.setRequestFocusEnabled(false);
        jPanelConnessione.setVerifyInputWhenFocusTarget(false);

        jLabel2.setText("utente");

        jTextFieldUsername.setText("pippolo");

        jLabel3.setText("password");

        jTextFieldPassword.setText("cass10");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("server");
        jLabel4.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        jTextFieldServer.setText("jabber.hot-chilli.net");

        jLabel5.setText("crea account");

        jToggleButton1.setText("no");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jSeparator1.setForeground(new java.awt.Color(51, 102, 255));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jButtonConnect.setText("connetti");
        jButtonConnect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonConnectMouseClicked(evt);
            }
        });

        jButtonDisconnect.setText("disconnetti");
        jButtonDisconnect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonDisconnectMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelConnessioneLayout = new javax.swing.GroupLayout(jPanelConnessione);
        jPanelConnessione.setLayout(jPanelConnessioneLayout);
        jPanelConnessioneLayout.setHorizontalGroup(
            jPanelConnessioneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConnessioneLayout.createSequentialGroup()
                .addGroup(jPanelConnessioneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelConnessioneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(filler1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelConnessioneLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(jPanelConnessioneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelConnessioneLayout.createSequentialGroup()
                                .addGroup(jPanelConnessioneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(35, 35, 35)
                                .addGroup(jPanelConnessioneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanelConnessioneLayout.createSequentialGroup()
                                        .addComponent(jTextFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(26, 26, 26)
                                        .addComponent(jLabel5)))
                                .addGap(18, 18, 18)
                                .addComponent(jToggleButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanelConnessioneLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel4)
                                .addGap(48, 48, 48)
                                .addComponent(jTextFieldServer, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(100, 100, 100)
                                .addComponent(jButtonConnect)
                                .addGap(40, 40, 40)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonDisconnect)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(63, 63, 63))
        );
        jPanelConnessioneLayout.setVerticalGroup(
            jPanelConnessioneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConnessioneLayout.createSequentialGroup()
                .addGroup(jPanelConnessioneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelConnessioneLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelConnessioneLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(jPanelConnessioneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonConnect)
                            .addComponent(jButtonDisconnect)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelConnessioneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelConnessioneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jTextFieldServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanelConnessioneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelConnessioneLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelConnessioneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelConnessioneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTextFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelConnessioneLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanelConnessioneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jToggleButton1)))))
        );

        jSplitPane1.setTopComponent(jPanelConnessione);

        jComboBoxUserSelect.setModel(new ComboModel(new ArrayList()));
        jComboBoxUserSelect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBoxUserSelectMouseClicked(evt);
            }
        });

        jLabel7.setText("seleziona contatto");

        jButtonSendRequest.setText("invia");
        jButtonSendRequest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSendRequestMouseClicked(evt);
            }
        });
        jButtonSendRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendRequestActionPerformed(evt);
            }
        });

        jLabelFile.setText("file ");

        jButtonScegliFile.setText("scegli file");
        jButtonScegliFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonScegliFileMouseClicked(evt);
            }
        });
        jButtonScegliFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonScegliFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelFileTransferLayout = new javax.swing.GroupLayout(jPanelFileTransfer);
        jPanelFileTransfer.setLayout(jPanelFileTransferLayout);
        jPanelFileTransferLayout.setHorizontalGroup(
            jPanelFileTransferLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFileTransferLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanelFileTransferLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jButtonSendRequest)
                    .addComponent(jButtonScegliFile))
                .addGap(43, 43, 43)
                .addGroup(jPanelFileTransferLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelFileTransferLayout.createSequentialGroup()
                        .addComponent(jLabelFile, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jComboBoxUserSelect, 0, 181, Short.MAX_VALUE))
                .addGap(303, 303, 303))
        );
        jPanelFileTransferLayout.setVerticalGroup(
            jPanelFileTransferLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFileTransferLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanelFileTransferLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxUserSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(29, 29, 29)
                .addGroup(jPanelFileTransferLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonScegliFile)
                    .addComponent(jLabelFile, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButtonSendRequest)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("invia file", jPanelFileTransfer);

        jTextFieldUserToAdd.setText("jTextField1");

        jComboBoxActiveUsers.setModel(new ComboModel(new ArrayList()));
        jComboBoxActiveUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBoxActiveUsersMouseClicked(evt);
            }
        });

        jButtonAggiungiUser.setText("aggiung iutente");
        jButtonAggiungiUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonAggiungiUserMouseClicked(evt);
            }
        });
        jButtonAggiungiUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAggiungiUserActionPerformed(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(255, 51, 51));
        jLabel6.setForeground(new java.awt.Color(255, 153, 153));
        jLabel6.setText("utenti connessi");

        javax.swing.GroupLayout jPanelUsersLayout = new javax.swing.GroupLayout(jPanelUsers);
        jPanelUsers.setLayout(jPanelUsersLayout);
        jPanelUsersLayout.setHorizontalGroup(
            jPanelUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUsersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxActiveUsers, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldUserToAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanelUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonAggiungiUser)
                    .addComponent(jLabel6))
                .addContainerGap(394, Short.MAX_VALUE))
        );
        jPanelUsersLayout.setVerticalGroup(
            jPanelUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUsersLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanelUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldUserToAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAggiungiUser))
                .addGap(57, 57, 57)
                .addGroup(jPanelUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxActiveUsers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(271, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("gestione contatti", jPanelUsers);

        jListProxies.setModel(new DefaultListModel());
        jScrollPane2.setViewportView(jListProxies);

        jButtonVerificaProxy.setText("contatta proxy");
        jButtonVerificaProxy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerificaProxyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelProxyLayout = new javax.swing.GroupLayout(jPanelProxy);
        jPanelProxy.setLayout(jPanelProxyLayout);
        jPanelProxyLayout.setHorizontalGroup(
            jPanelProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelProxyLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addComponent(jButtonVerificaProxy)
                .addContainerGap(319, Short.MAX_VALUE))
        );
        jPanelProxyLayout.setVerticalGroup(
            jPanelProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelProxyLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanelProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonVerificaProxy)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(290, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("verifica proxy", jPanelProxy);

        jTableReceivingFile.setModel(new GUI.models.TableModelIncomingFileTransfers());
        jScrollPane1.setViewportView(jTableReceivingFile);
        TableColumnModel tcmRec = jTableReceivingFile.getColumnModel();
        GUI.models.TableModelIncomingFileTransfers modelRec = (GUI.models.TableModelIncomingFileTransfers )jTableReceivingFile.getModel();
        TableColumn tcRec = tcmRec.getColumn(4);
        tcRec.setCellRenderer(new ProgressRenderer());
        int delay = 4000; //milliseconds
        ActionListener taskPerformerRec = new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                ( (GUI.models.TableModelIncomingFileTransfers)jTableReceivingFile.getModel()).fireTableDataChanged();
            }
        };

        new Timer(delay, taskPerformerRec).start();

        jTabbedPane1.addTab("file in ingresso", jScrollPane1);

        jTableSendingFile.setModel(new GUI.models.TableModelOutcomingFileTransfers());
        jScrollPane5.setViewportView(jTableSendingFile);
        TableColumnModel tcmSend = jTableSendingFile.getColumnModel();
        GUI.models.TableModelOutcomingFileTransfers modelSend = (GUI.models.TableModelOutcomingFileTransfers )jTableSendingFile.getModel();
        TableColumn tcSend = tcmSend.getColumn(4);
        tcSend.setCellRenderer(new ProgressRenderer());

        ActionListener taskPerformerSend = new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                ( (GUI.models.TableModelOutcomingFileTransfers)jTableSendingFile.getModel()).fireTableDataChanged();
            }
        };
        new Timer(delay, taskPerformerSend).start();

        jTabbedPane1.addTab("file in uscita", jScrollPane5);

        jScrollPane4.setViewportView(jTabbedPane1);

        jSplitPane1.setRightComponent(jScrollPane4);

        jPanel1.add(jSplitPane1, "connessione");

        getContentPane().add(jPanel1);

        jScrollPane3.setBackground(new java.awt.Color(204, 255, 204));
        jScrollPane3.setAutoscrolls(true);
        jScrollPane3.setPreferredSize(new java.awt.Dimension(166, 200));

        jTextAreaOutput.setColumns(20);
        jTextAreaOutput.setRows(5);
        jTextAreaOutput.setMinimumSize(new java.awt.Dimension(4, 80));
        jScrollPane3.setViewportView(jTextAreaOutput);

        getContentPane().add(jScrollPane3);

        jMenu1.setText("connessioni");

        jMenuItemNuovaConnessione.setText("connesione server");
        jMenuItemNuovaConnessione.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItemNuovaConnessioneMouseClicked(evt);
            }
        });
        jMenuItemNuovaConnessione.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNuovaConnessioneActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemNuovaConnessione);

        jMenuBarConnessioni.add(jMenu1);

        jMenu2.setText("utilità");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItemSaveTextArea.setText("salva log");
        jMenuItemSaveTextArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveTextAreaActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemSaveTextArea);

        jMenuItem1.setText("cambia cartella file");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBarConnessioni.add(jMenu2);

        setJMenuBar(jMenuBarConnessioni);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemNuovaConnessioneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemNuovaConnessioneMouseClicked
        // TODO add your handling code here:
   
    }//GEN-LAST:event_jMenuItemNuovaConnessioneMouseClicked

    private void jMenuItemNuovaConnessioneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNuovaConnessioneActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout)(this.jPanel1.getLayout());
    cl.show(this.jPanel1, "connessione");

    }//GEN-LAST:event_jMenuItemNuovaConnessioneActionPerformed
private void connect(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
   if ( XMPPHandler == null){
       client = new XMPP(jTextFieldServer.getText(), 5222, 
                jTextFieldUsername.getText(), 
                jTextFieldPassword.getText(), jToggleButton1.isSelected());
        client.addFileReceiverListener((FileReceiverListener)this.jTableReceivingFile.getModel());
        XMPPHandler = client.createHandler();
       
               XMPPHandler.addConnectionListener(this);
               XMPPHandler.addRosterListener(this);
   }
        
        XMPPHandler.start(jToggleButton1.isSelected());
       
    }  
private void verificaProxies(){
    if ( XMPPHandler != null)
        XMPPHandler.verifcaProxies();
}
private void setSelected(java.awt.event.ActionEvent evt){
    if ( jToggleButton1.isSelected())
        jToggleButton1.setText("si");
    else jToggleButton1.setText("no");
}
private void disconnect(){
    if (XMPPHandler != null)
        XMPPHandler.getConnessione().disconnect();
    
}
    private void users1ComboMouseClicked(java.awt.event.MouseEvent evt) {    

  
       this.jComboBoxActiveUsers.setModel(new ComboModel(XMPPHandler.getUsers()));
    }
    private void aggiungiUser(java.awt.event.MouseEvent evt) {  
           if ( XMPPHandler != null)
               XMPPHandler.findUser(this.jTextFieldUserToAdd.getText());
       }  
   private void scegliFile(){
       this.jFileChooser1.setFileSelectionMode(JFileChooser.FILES_ONLY);
    int returnVal = jFileChooser1.showOpenDialog(this);
    if(returnVal == JFileChooser.APPROVE_OPTION) {
       System.out.println("You chose to open this file: " +
            jFileChooser1.getSelectedFile().getName());
       jLabelFile.setText(
               jFileChooser1.getSelectedFile().getAbsolutePath());
              
    }
 
}
     private void aggiornaContattiAttivi(){    

   
   

}
    private void sendFile(java.awt.event.MouseEvent evt){
         Thread transferThread = new Thread(new Runnable() {
            public void run() {
                String JID =(String)jComboBoxUserSelect.getSelectedItem();
                String filename =jLabelFile.getText();
                File file = jFileChooser1.getSelectedFile();
              
                Sender sender = 
                        XMPPHandler.createNewOutgoingFileTransfer(JID, file);
                sender.setListener((FileSenderListener) jTableSendingFile.getModel());
                sender.transferFile();
                

            }
         });
        transferThread.start();
    }
    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
    
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenuItemSaveTextAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveTextAreaActionPerformed
        // TODO add your handling code here:
          this.jFileChooser1.setFileSelectionMode(JFileChooser.FILES_ONLY);
         int returnVal = jFileChooser1.showSaveDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
           System.out.println("You chose to open this file: " +
            jFileChooser1.getSelectedFile().getName());
           
            JTextArea area = this.jTextAreaOutput;
            try {
                FileWriter fw = new FileWriter(jFileChooser1.getSelectedFile());
                BufferedWriter fileOut = new BufferedWriter(fw);
               area.write(fileOut);
            } catch (IOException ex) {
             Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_jMenuItemSaveTextAreaActionPerformed
}
    private void jButtonVerificaProxyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerificaProxyActionPerformed
        // TODO add your handling code here:
         java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               if (XMPPHandler.getConnessione() != null){    
                   ((DefaultListModel)jListProxies.getModel()).removeAllElements();
                   ArrayList lista = XMPPHandler.verifcaProxies();
                   for ( int i = 0 ; i < lista.size(); i = i + 1)
                    ((DefaultListModel)jListProxies.getModel()).addElement(lista.get(i));
            
        }

            }
        });
   
        
    }//GEN-LAST:event_jButtonVerificaProxyActionPerformed

    private void jButtonAggiungiUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAggiungiUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonAggiungiUserActionPerformed

    private void jButtonAggiungiUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAggiungiUserMouseClicked
        // TODO add your handling code here:
        aggiungiUser(evt);
    }//GEN-LAST:event_jButtonAggiungiUserMouseClicked

    private void jComboBoxActiveUsersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxActiveUsersMouseClicked
        // TODO add your handling code here:
        users1ComboMouseClicked(evt);
    }//GEN-LAST:event_jComboBoxActiveUsersMouseClicked

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
        if ( jToggleButton1.isSelected())
        jToggleButton1.setText("si");
        else jToggleButton1.setText("no");
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jButtonDisconnectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDisconnectMouseClicked
        // TODO add your handling code here:
        if (XMPPHandler != null)
        XMPPHandler.getConnessione().disconnect();
     

    }//GEN-LAST:event_jButtonDisconnectMouseClicked

    private void jButtonConnectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonConnectMouseClicked
        // TODO add your handling code here:
        this.connect(null);
    }//GEN-LAST:event_jButtonConnectMouseClicked

    private void jButtonScegliFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonScegliFileActionPerformed
        // TODO add your handling code here:
        scegliFile();
    }//GEN-LAST:event_jButtonScegliFileActionPerformed

    private void jButtonSendRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendRequestActionPerformed
       
    }//GEN-LAST:event_jButtonSendRequestActionPerformed

    private void jButtonSendRequestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSendRequestMouseClicked
        // TODO add your handling code here: 
        sendFile(evt);
    }//GEN-LAST:event_jButtonSendRequestMouseClicked

    private void jButtonScegliFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonScegliFileMouseClicked
        // TODO add your handling code here:
       scegliFile();  
    }//GEN-LAST:event_jButtonScegliFileMouseClicked

    private void jComboBoxUserSelectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxUserSelectMouseClicked
        // TODO add your handling code here:
        aggiornaContattiAttivi();
    }//GEN-LAST:event_jComboBoxUserSelectMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        this.jFileChooser1.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
           int returnVal = jFileChooser1.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            Transfers.setDIR(jFileChooser1.getSelectedFile().getAbsolutePath());
            System.out.println("tra " + Transfers.getDIR());
        }
           
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
 XMPP client = null;
 TextAreaHandler handler;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    public javax.swing.JButton jButtonAggiungiUser;
    public javax.swing.JButton jButtonConnect;
    public javax.swing.JButton jButtonDisconnect;
    public javax.swing.JButton jButtonScegliFile;
    public javax.swing.JButton jButtonSendRequest;
    private javax.swing.JButton jButtonVerificaProxy;
    public javax.swing.JComboBox jComboBoxActiveUsers;
    public javax.swing.JComboBox jComboBoxUserSelect;
    public javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelColor;
    public javax.swing.JLabel jLabelFile;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JList jListProxies;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBarConnessioni;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItemNuovaConnessione;
    private javax.swing.JMenuItem jMenuItemSaveTextArea;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelConnectionStatus;
    private javax.swing.JPanel jPanelConnessione;
    private javax.swing.JPanel jPanelFileTransfer;
    private javax.swing.JPanel jPanelProxy;
    private javax.swing.JPanel jPanelUsers;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPaneTextAreaLog;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableReceivingFile;
    private javax.swing.JTable jTableSendingFile;
    private javax.swing.JTextArea jTextAreaLog;
    private javax.swing.JTextArea jTextAreaOutput;
    public javax.swing.JTextField jTextFieldPassword;
    public javax.swing.JTextField jTextFieldServer;
    public javax.swing.JTextField jTextFieldUserToAdd;
    public javax.swing.JTextField jTextFieldUsername;
    public javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void connected(XMPPConnection connection) {

      jLabelStatus.setText("connesso, not logged");
       System.out.println("fanto");
       this.jButtonConnect.setEnabled(false);
    }

    @Override
    public void authenticated(XMPPConnection connection, boolean resumed) {
        jLabelColor.setBackground(Color.green);
         jLabelColor.setForeground(Color.green);
          jLabelStatus.setText("autenticato");
     
         
    }

    @Override
    public void connectionClosed() {
       jLabelColor.setBackground(Color.RED);
        jLabelColor.setForeground(Color.RED);
          jLabelStatus.setText("connessione chiusa ");
      jButtonConnect.setEnabled(true);
 
    }

    @Override
    public void connectionClosedOnError(Exception e) {
        jLabelColor.setBackground(Color.RED);
        jLabelColor.setForeground(Color.RED);
          jLabelStatus.setText("connessione chiusa per errore");
     
         
    }

    @Override
    public void reconnectionSuccessful() {
       jLabelStatus.setText(
                 "connesso nuovamente");
     
    }

    @Override
    public void reconnectingIn(int seconds) {
         jLabelStatus.setText(
                 "tentativo di connesione tra " + seconds +" secondi");
    }

    @Override
    public void reconnectionFailed(Exception e) {
        
    }
    private void setHanlder(){
      
       PrintStream printStream = new PrintStream(new TextAreaOutputStream(
               this.jTextAreaOutput));
       System.setOut(printStream);
        System.setErr(printStream);
        handler=new TextAreaHandler(this.jTextAreaOutput);
    
          handler.setLevel(Level.ALL);
          handler.setFormatter(new java.util.logging.SimpleFormatter());
         
          Logger.getLogger(XMPP.class.getName()).addHandler(handler);
          
       
    }

    @Override
    public void entriesAdded(Collection<String> addresses) {
       if ( XMPPHandler != null){
           this.jComboBoxUserSelect.setModel(new ComboModel(XMPPHandler.getUsers()));
       }
    }

    @Override
    public void entriesUpdated(Collection<String> addresses) {
     if ( XMPPHandler != null){
           this.jComboBoxUserSelect.setModel(new ComboModel(XMPPHandler.getUsers()));
            this.jComboBoxActiveUsers.setModel(new ComboModel(XMPPHandler.getUsers()));
       
       }
    }

    @Override
    public void entriesDeleted(Collection<String> addresses) {
        
    }

    @Override
    public void presenceChanged(Presence presence) {
        if ( XMPPHandler != null){
           this.jComboBoxUserSelect.setModel(new ComboModel(XMPPHandler.getUsers()));
          this.jComboBoxActiveUsers.setModel(new ComboModel(XMPPHandler.getUsers()));
      
       }
    }
}
/*}*/